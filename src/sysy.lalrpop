// lalrpop 里的约定
grammar;
use crate::ast::*;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 同上, 不解释
FuncDef: FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef { <> }
  }
};

FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <items: (BlockItem)*> "}" => Block { <> };

BlockItem: BlockItem = {
  Decl => BlockItem::Decl(<>),
  Stmt => BlockItem::Stmt(<>),
}

Decl: Decl = {
  ConstDecl => Decl::Const(<>),
  VarDecl => Decl::Var(<>),
}

ConstDecl: ConstDecl = {
  "const" "int" <def: ConstDef> <mut defs: ("," <ConstDef>)*> ";" => {
    defs.insert(0, def);
    ConstDecl { defs }
  },
}

ConstInitVal: ConstInitVal = {
  ConstExp => ConstInitVal::Exp(<>),
}

VarDecl: VarDecl = {
  "int" <def: VarDef> <mut defs: ("," <VarDef>)*> ";" => {
    defs.insert(0, def);
    VarDecl { defs }
  },
}
VarDef: VarDef = {
  <id: Ident> <dims: ("[" <ConstExp> "]")*> <init: ("=" <InitVal>)?> => {
    VarDef { <> }
  },
}

InitVal: InitVal = {
  Exp => InitVal::Exp(<>),
}

ConstDef: ConstDef = {
  <id: Ident> <dims: ("[" <ConstExp> "]")*> "=" <init: ConstInitVal> => {
    ConstDef { <> }
  },
}

ConstExp: ConstExp = <exp: Exp> => ConstExp { <> };

Stmt: Stmt = {
  MatchedStmt => <>,
  OpenStmt => <>,
};

MatchedStmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign { <> }),
  "return" <exp: (Exp)?> ";" => Stmt::Return(Return { <> }),
  Block => Stmt::Block(<>),
  <exp: (Exp)?> ";" => Stmt::ExpStmt(ExpStmt { <> }),
  "if" "(" <cond: Exp> ")" <then: MatchedStmt>
  "else" <else_then: MatchedStmt> => {
    Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
  },
}

OpenStmt: Stmt = {
  "if" "(" <cond: Exp> ")" <then: Stmt> => {
    Stmt::If(Box::new(If { cond, then, else_then: None }))
  },
  "if" "(" <cond: Exp> ")" <then: MatchedStmt>
  "else" <else_then: OpenStmt> => {
    Stmt::If(Box::new(If { cond, then, else_then: Some(else_then) }))
  },
}

Exp: Exp = <lor: LOrExp> => Exp { <> };
LVal: LVal = <id: Ident> <indices: ("[" <Exp> "]")*> => LVal { <> };

UnaryExp: UnaryExp = {
  PrimaryExp => UnaryExp::Primary(<>),
  "+" <UnaryExp> => <>,
  <op: UnaryOp> <exp: UnaryExp> => UnaryExp::Unary(op, Box::new(exp)),
};

PrimaryExp: PrimaryExp = {
  "(" <Exp> ")" => PrimaryExp::Exp(Box::new(<>)),
  LVal => PrimaryExp::LVal(<>),
  Number => PrimaryExp::Number(<>),
};

UnaryOp: UnaryOp = {
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::LNot,
};

MulExp: MulExp = {
  UnaryExp => MulExp::Unary(<>),
  <lhs: MulExp> <op: MulOp> <rhs: UnaryExp> => {
    MulExp::MulUnary(Box::new(lhs), op, rhs)
  },
}

AddExp: AddExp = {
  MulExp => AddExp::Mul(<>),
  <lhs: AddExp> <op: AddOp> <rhs: MulExp> => {
    AddExp::AddMul(Box::new(lhs), op, rhs)
  },
}

RelExp: RelExp = {
  AddExp => RelExp::Add(<>),
  <lhs: RelExp> <op: RelOp> <rhs: AddExp> => {
    RelExp::RelAdd(Box::new(lhs), op, rhs)
  },
}

EqExp: EqExp = {
  RelExp => EqExp::Rel(<>),
  <lhs: EqExp> <op: EqOp> <rhs: RelExp> => {
    EqExp::EqRel(Box::new(lhs), op, rhs)
  },
}

LAndExp: LAndExp = {
  EqExp => LAndExp::Eq(<>),
  <lhs: LAndExp> "&&" <rhs: EqExp> => {
    LAndExp::LAndEq(Box::new(lhs), rhs)
  },
}

LOrExp: LOrExp = {
  LAndExp => LOrExp::LAnd(<>),
  <lhs: LOrExp> "||" <rhs: LAndExp> => {
    LOrExp::LOrLAnd(Box::new(lhs), rhs)
  },
}

MulOp: MulOp = {
  "*" => MulOp::Mul,
  "/" => MulOp::Div,
  "%" => MulOp::Mod,
}

AddOp: AddOp = {
  "+" => AddOp::Add,
  "-" => AddOp::Sub,
}

RelOp: RelOp = {
  "<" => RelOp::Lt,
  ">" => RelOp::Gt,
  "<=" => RelOp::Le,
  ">=" => RelOp::Ge,
}

EqOp: EqOp = {
  "==" => EqOp::Eq,
  "!=" => EqOp::Neq,
}

Number: i32 = <num: IntConst> => <>;

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
